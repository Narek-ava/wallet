
# PHP as Linux Web App on Azure
# Build, package and deploy your PHP project to Azure Linux Web App.
# Add steps that run tests and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/php

trigger:
- azure-cratos2

variables:
- group: cratos2-prod
  # Azure Resource Manager connection created during pipeline creation
- name: azureSubscription
  value: 'Sky-Mechanics (5756b243-49ab-433c-8083-a7634c754445)'

  # Web app name
- name: webAppName
  value: 'cratos2-win'

  # Agent VM image name
- name:  vmImageName
  value: 'ubuntu-20.04'

  # Environment name
- name: environmentName
  value: 'cratos2'

  # Resource Group Name
- name: ResourceGroupName
  value: 'cratos2'

  # Root folder under which your composer.json file is available.
- name: rootFolder
  value: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build stage
  variables:
    phpVersion: '7.4'
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - script: |
        sudo update-alternatives --set php /usr/bin/php$(phpVersion)
        sudo update-alternatives --set phar /usr/bin/phar$(phpVersion)
        sudo update-alternatives --set phpdbg /usr/bin/phpdbg$(phpVersion)
        sudo update-alternatives --set php-cgi /usr/bin/php-cgi$(phpVersion)
        sudo update-alternatives --set phar.phar /usr/bin/phar.phar$(phpVersion)
        sudo apt install php-http
        php -version
      workingDirectory: $(rootFolder)
      displayName: 'Use PHP version $(phpVersion)'

    - script: composer update --prefer-dist --no-interaction --with-all-dependencies
      workingDirectory: $(rootFolder)
      displayName: 'Composer update'

    - script: composer install --no-interaction --prefer-dist
      workingDirectory: $(rootFolder)
      displayName: 'Composer install'

    - task: EnvTransform@0
      displayName: 'replace .env variables'
      inputs:
        inputType: 'file'
        inputFile: '.env.template'
        preserveComments: true

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(rootFolder)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          # - task: AzureAppServiceManage@0
          #   displayName: 'Start Stage Slot on Web App'
          #   inputs:
          #     azureSubscription: $(azureSubscription)
          #     Action: 'Start Azure App Service'
          #     WebAppName: $(WebAppName)
          #     SpecifySlotOrASE: true
          #     ResourceGroupName: $(ResourceGroupName)
          #     Slot: 'stage'
          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy To WebApp Slot and run php postdeploy commands'
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: $(azureSubscription)
              appType: 'webApp'
              WebAppName: $(WebAppName)
              deployToSlotOrASE: true
              ResourceGroupName: $(ResourceGroupName)
              SlotName: 'production'
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              ScriptType: 'Inline Script'
              InlineScript: |
                php %HOME%\site\wwwroot\artisan cache:clear
                php %HOME%\site\wwwroot\artisan config:clear
                php %HOME%\site\wwwroot\artisan config:cache
                php %HOME%\site\wwwroot\artisan storage:link
                php %HOME%\site\wwwroot\artisan migrate
              enableCustomDeployment: true
              DeploymentType: 'zipDeploy'
              TakeAppOfflineFlag: false
          # - task: AzureAppServiceManage@0
          #   displayName: 'Swap Slots on Web App'
          #   inputs:
          #     azureSubscription: $(azureSubscription)
          #     Action: 'Swap Slots'
          #     WebAppName: $(WebAppName)
          #     ResourceGroupName: $(ResourceGroupName)
          #     SourceSlot: 'stage'
          #     PreserveVnet: true
          # - task: AzureAppServiceManage@0
          #   displayName: 'Stop Stage Slot on Web App'
          #   inputs:
          #     azureSubscription: $(azureSubscription)
          #     Action: 'Stop Azure App Service'
          #     WebAppName: $(WebAppName)
          #     SpecifySlotOrASE: true
          #     ResourceGroupName: $(ResourceGroupName)
          #     Slot: 'stage'
          - task: SendTelegramNotification@0
            inputs:
              botToken: '$(TELEGRAM_LOGGER_BOT_TOKEN)'
              chats: '$(TELEGRAM_LOGGER_CHAT_ID)'
              teamUrl: true
              message: '$(MESSAGE)'
              buildNumber: true
              buildQueuedBy: true
